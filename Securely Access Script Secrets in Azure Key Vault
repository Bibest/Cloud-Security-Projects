Securely Access Script Secrets in Azure Key Vault
Introduction
Azure includes several services to help protect secret information for our applications and scripts. Key Vault is designed for secure programmatic access of secret information. However, to access this information, we need to authenticate against Azure AD. This is where managed identities can help. And while, Key Vault is built for public accessibility, through the use of a resource firewall and Azure Private Link, we can ensure this communication remains private.

In this hands-on lab, we'll configure secure connectivity for a VM to Azure Key Vault using Azure Private Link. We'll also enable managed identity for the VM to provide native Azure AD authentication to the Key Vault service.

Scenario

You've recently been hired as a security engineer and tasked with improving the security of some DevOps tasks that are performed at your company.

Your manager has asked you to improve the security of an important automation VM, which is responsible for running several scripts.

It has been found that some PowerShell scripts currently executing on the automation VM are using secret information hard-coded into the scripts in plain text.

You must secure this solution by configuring Azure Key Vault, Private Link, and managed identities all to ensure the automation scripts can run securely by storing secrets in Key Vault.

Solution
Log in to the Azure portal using the credentials provided on the lab page. Be sure to use an incognito or private browser window to ensure you're using the lab account rather than your own.

This lab requires use of a Remote Desktop client (either through the Remote Desktop client available on Windows machines or through the Microsoft Remote Desktop application available for Mac machines) using the public IP address and credentials provided for each on the lab page.

Associate the Managed Identity with the VM
From the Azure portal, navigate to All resources to confirm virtual machine, virtual network, and network security group are ready to go. Take note of the location of the deployed resources; our example uses West US.
Select the Managed Identity.
From the left menu, select Azure role assignments. Observe the identity has the Key Vault Secrets Officer role.
Using the breadcrumb navigation menu at the top, navigate back to the resource group.
Select the vm1 virtual machine.
From the left menu, under Settings, select Identity.
Select the User assigned tab.
Click Add user assigned managed identity.
In the pop-up that appears, select the box for the managedidentity.
Click Add.
Configure Key Vault with Private Link
Navigate to the resource group using the breadcrumb navigation at the top. Then, click Create.
In the search bar, enter key vault and select Key Vault.
Under the Key Vault tile, click Create > Create.
Select the pre-configured existing resource group for Resource group.
Give your key vault a unique name (in our example, we use keyvault902).
Select the region used previously (in our example, we use West US).
Enter 7 for the Days to retain deleted vaults field.
Click Next.
Under Permission model, choose Azure role-based access control.
Click Next.
In the Networking tab, deselect Enable public access.
Click Create a private endpoint.
Select the pre-configured resource group for Resource Group.
Select the region used previously (in our example, we use West US).
Give your private endpoint a unique name (in our example, we use keyvault-endpoint).
Select the available Virtual Network and Subnet.
Click OK.
Click Review + Create.
Once validation passes successfully, then you'll be able to click Create.
Note: This process can take a few minutes as networking and the private endpoints will need to be configured.

Use PowerShell to Create and Read Secrets in Key Vault
Log in to the vm1 virtual machine using your preferred Remote Desktop client. Use the login credentials provided in the lab instructions.

Once logged in to the virtual machine, right-click the Start button and select Windows PowerShell (Admin).

Once in the PowerShell terminal, log in to Azure using managed identity:

Connect-AzAccount -Identity
Capture a secure string to store:

$secret = Read-Host -AsSecureString
Type in any secret text of your choice and press Enter (in our example, we use password).

Get the Key Vault and save it to a variable called kv:

$kv=Get-AzKeyVault
Check the key is returned:

$kv
Create a Key Vault secret:

Set-AzKeyVaultSecret -VaultName $kv.VaultName -Name MySecret -SecretValue $secret
Retrieve a secret from Key Vault (as plain text):

Get-AzKeyVaultSecret -VaultName $kv.VaultName -name MySecret -AsPlainText
The previously typed secret text should now be visible as an output in your terminal.

Conclusion
